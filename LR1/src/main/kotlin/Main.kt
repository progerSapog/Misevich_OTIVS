import State.*

/**
 * Возможные состояния
 */
enum class State {
    EXP, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13,
}

/**
 * Связь состояний и вопросов
 */
val questions = mapOf(
    S1 to "Компьютер включен в розетку?",
    S2 to "Требуется включить компьютер в розетку.",
    S3 to "Розетка подключена к сети?",
    S4 to "Требуется подключить розетку к сети или подключить компьютер в работающую розетку.",
    S5 to "При нажатии кнопки включения издаёт звуки?",
    S6 to "Напряжение на материнской плате есть?",
    S7 to "Биппер издает звуки?",
    S8 to "Неисправен блок питания, с малой вероятностью может быть неисправна материнская плата.",
    S9 to "Скорее всего неисправна материнская плата или процессор. Требуется более детальный анализ - обратитесь к специалисту.",
    S10 to "Биппер встроен в материнскую плату?",
    S11 to "Требуется прослушать сигнал биппера, найти в документации значение сигнала. Или обратиться к специалисту.",
    S12 to "Требуется подключить внешнее звуковое устройство и прослушать сигнал биппера. Найти в документации значение сигнала. Или обратиться к специалисту."
)

/**
 * Возможные переходы
 */
val transitions = mapOf(
    S1 to Pair(S3, S2),
    S3 to Pair(S5, S4),
    S5 to Pair(S7, S6),
    S6 to Pair(S9, S8),
    S7 to Pair(S11, S10),
    S10 to Pair(S13, S12)
)

/**
 * Ввод пользователя - смена состояний
 */
fun ask(state: State): State {
    println(questions[state])
    println("1. Да")
    println("2. Нет")

    return when (readLine()) {
        "1" -> transitions[state]!!.first
        "2" -> transitions[state]!!.second
        else -> EXP
    }
}

fun main() {
    var state = S1

    //цикл опроса пользователя
    while (state in transitions.keys) {
        state = ask(state)
    }

    //Вывод результирующего состояния или сообщения об ошибке
    when (state) {
        EXP -> println("Ошибка ввода!")
        else -> {
            println(questions[state])
            println("Stop!")
        }
    }
}